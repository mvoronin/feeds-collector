// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package models

import (
	"context"
	"database/sql"
	"time"

	null "github.com/guregu/null"
)

const addChannelToGroup = `-- name: AddChannelToGroup :exec
INSERT INTO feed_group_channel (group_id, channel_id)
VALUES (?1, ?2)
`

type AddChannelToGroupParams struct {
	GroupID   int64 `json:"group_id"`
	ChannelID int64 `json:"channel_id"`
}

func (q *Queries) AddChannelToGroup(ctx context.Context, arg AddChannelToGroupParams) error {
	_, err := q.db.ExecContext(ctx, addChannelToGroup, arg.GroupID, arg.ChannelID)
	return err
}

const createFeedChannel = `-- name: CreateFeedChannel :one
INSERT INTO feed_channel (title, description, link, host)
VALUES (?1, ?2, ?3, ?4)
RETURNING id, title, description, link, host, published
`

type CreateFeedChannelParams struct {
	Title       string `json:"title" validate:"required,min=5,max=20"`
	Description string `json:"description"`
	Link        string `json:"link" validate:"required,url"`
	Host        string `json:"host"`
}

type CreateFeedChannelRow struct {
	ID          int64     `json:"id"`
	Title       string    `json:"title" validate:"required,min=5,max=20"`
	Description string    `json:"description"`
	Link        string    `json:"link" validate:"required,url"`
	Host        string    `json:"host"`
	Published   null.Time `json:"published" validate:"required"`
}

func (q *Queries) CreateFeedChannel(ctx context.Context, arg CreateFeedChannelParams) (CreateFeedChannelRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedChannel,
		arg.Title,
		arg.Description,
		arg.Link,
		arg.Host,
	)
	var i CreateFeedChannelRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Link,
		&i.Host,
		&i.Published,
	)
	return i, err
}

const createFeedChannelItem = `-- name: CreateFeedChannelItem :exec
INSERT INTO feed_channel_item (channel_id, item_id)
VALUES (?, ?)
ON CONFLICT DO NOTHING
`

type CreateFeedChannelItemParams struct {
	ChannelID int64 `json:"channel_id" validate:"required"`
	ItemID    int64 `json:"item_id" validate:"required"`
}

func (q *Queries) CreateFeedChannelItem(ctx context.Context, arg CreateFeedChannelItemParams) error {
	_, err := q.db.ExecContext(ctx, createFeedChannelItem, arg.ChannelID, arg.ItemID)
	return err
}

const createFeedChannelLog = `-- name: CreateFeedChannelLog :exec
INSERT INTO feed_channel_log (channel_id, last_update)
VALUES (?, datetime('now'))
`

func (q *Queries) CreateFeedChannelLog(ctx context.Context, channelID int64) error {
	_, err := q.db.ExecContext(ctx, createFeedChannelLog, channelID)
	return err
}

const createFeedItem = `-- name: CreateFeedItem :one
INSERT INTO feed_item (guid, guid_is_permalink, title, description, link, author, published)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, read, created, updated
`

type CreateFeedItemParams struct {
	Guid            null.String  `json:"guid,omitempty" validate:"required"`
	GuidIsPermalink sql.NullBool `json:"guid_is_permalink"`
	Title           string       `json:"title"`
	Description     null.String  `json:"description,omitempty" validate:"required"`
	Link            string       `json:"link"`
	Author          *string      `json:"author,omitempty" validate:"required"`
	Published       null.Time    `json:"published" validate:"required"`
}

type CreateFeedItemRow struct {
	ID      int64        `json:"id"`
	Read    bool         `json:"read"`
	Created time.Time    `json:"created"`
	Updated sql.NullTime `json:"updated"`
}

func (q *Queries) CreateFeedItem(ctx context.Context, arg CreateFeedItemParams) (CreateFeedItemRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedItem,
		arg.Guid,
		arg.GuidIsPermalink,
		arg.Title,
		arg.Description,
		arg.Link,
		arg.Author,
		arg.Published,
	)
	var i CreateFeedItemRow
	err := row.Scan(
		&i.ID,
		&i.Read,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const createGroup = `-- name: CreateGroup :exec
INSERT INTO feed_group (name, parent_id)
VALUES (?1, ?2)
`

type CreateGroupParams struct {
	Name     string        `json:"name"`
	ParentID sql.NullInt64 `json:"parent_id"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) error {
	_, err := q.db.ExecContext(ctx, createGroup, arg.Name, arg.ParentID)
	return err
}

const deleteFeedChannel = `-- name: DeleteFeedChannel :exec
DELETE FROM feed_channel
WHERE id = ?
`

func (q *Queries) DeleteFeedChannel(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFeedChannel, id)
	return err
}

const deleteFeedItem = `-- name: DeleteFeedItem :exec
DELETE FROM feed_item
WHERE id = ?
`

func (q *Queries) DeleteFeedItem(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFeedItem, id)
	return err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM feed_group
WHERE id = ?1
`

func (q *Queries) DeleteGroup(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, id)
	return err
}

const getFeedChannel = `-- name: GetFeedChannel :one
SELECT fc.id, fc.title, fc.description, fc.link, fc.host, fc.published
FROM feed_channel AS fc
WHERE fc.id = ?1
LIMIT 1
`

type GetFeedChannelRow struct {
	ID          int64     `json:"id"`
	Title       string    `json:"title" validate:"required,min=5,max=20"`
	Description string    `json:"description"`
	Link        string    `json:"link" validate:"required,url"`
	Host        string    `json:"host"`
	Published   null.Time `json:"published" validate:"required"`
}

func (q *Queries) GetFeedChannel(ctx context.Context, id int64) (GetFeedChannelRow, error) {
	row := q.db.QueryRowContext(ctx, getFeedChannel, id)
	var i GetFeedChannelRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Link,
		&i.Host,
		&i.Published,
	)
	return i, err
}

const getFeedChannelsIDs = `-- name: GetFeedChannelsIDs :many
SELECT channel_id
FROM feed_channel_item
WHERE item_id = ?
`

func (q *Queries) GetFeedChannelsIDs(ctx context.Context, itemID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getFeedChannelsIDs, itemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var channel_id int64
		if err := rows.Scan(&channel_id); err != nil {
			return nil, err
		}
		items = append(items, channel_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedItemByGuid = `-- name: GetFeedItemByGuid :one
SELECT fi.id, fi.guid, fi.guid_is_permalink, fi.title, fi.description, fi.link, fi.author, fi.published
FROM feed_item AS fi
WHERE fi.guid = ?1
LIMIT 1
`

type GetFeedItemByGuidRow struct {
	ID              int64        `json:"id"`
	Guid            null.String  `json:"guid,omitempty" validate:"required"`
	GuidIsPermalink sql.NullBool `json:"guid_is_permalink"`
	Title           string       `json:"title"`
	Description     null.String  `json:"description,omitempty" validate:"required"`
	Link            string       `json:"link"`
	Author          *string      `json:"author,omitempty" validate:"required"`
	Published       null.Time    `json:"published" validate:"required"`
}

func (q *Queries) GetFeedItemByGuid(ctx context.Context, guid null.String) (GetFeedItemByGuidRow, error) {
	row := q.db.QueryRowContext(ctx, getFeedItemByGuid, guid)
	var i GetFeedItemByGuidRow
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.GuidIsPermalink,
		&i.Title,
		&i.Description,
		&i.Link,
		&i.Author,
		&i.Published,
	)
	return i, err
}

const getFeedItemByLink = `-- name: GetFeedItemByLink :one
SELECT fi.id, fi.guid, fi.guid_is_permalink, fi.title, fi.description, fi.link, fi.author, fi.published
FROM feed_item AS fi
WHERE fi.link = ?1 AND (fi.guid IS NULL OR fi.guid = '')
LIMIT 1
`

type GetFeedItemByLinkRow struct {
	ID              int64        `json:"id"`
	Guid            null.String  `json:"guid,omitempty" validate:"required"`
	GuidIsPermalink sql.NullBool `json:"guid_is_permalink"`
	Title           string       `json:"title"`
	Description     null.String  `json:"description,omitempty" validate:"required"`
	Link            string       `json:"link"`
	Author          *string      `json:"author,omitempty" validate:"required"`
	Published       null.Time    `json:"published" validate:"required"`
}

func (q *Queries) GetFeedItemByLink(ctx context.Context, link string) (GetFeedItemByLinkRow, error) {
	row := q.db.QueryRowContext(ctx, getFeedItemByLink, link)
	var i GetFeedItemByLinkRow
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.GuidIsPermalink,
		&i.Title,
		&i.Description,
		&i.Link,
		&i.Author,
		&i.Published,
	)
	return i, err
}

const getLastChannelUpdateDate = `-- name: GetLastChannelUpdateDate :one
SELECT last_update
FROM feed_channel_log
WHERE channel_id = ?1
ORDER BY last_update DESC
LIMIT 1
`

func (q *Queries) GetLastChannelUpdateDate(ctx context.Context, id int64) (sql.NullTime, error) {
	row := q.db.QueryRowContext(ctx, getLastChannelUpdateDate, id)
	var last_update sql.NullTime
	err := row.Scan(&last_update)
	return last_update, err
}

const listAllFeedChannel = `-- name: ListAllFeedChannel :many
SELECT id, title, description, link, host, published, enabled
FROM feed_channel
ORDER BY title
`

type ListAllFeedChannelRow struct {
	ID          int64     `json:"id"`
	Title       string    `json:"title" validate:"required,min=5,max=20"`
	Description string    `json:"description"`
	Link        string    `json:"link" validate:"required,url"`
	Host        string    `json:"host"`
	Published   null.Time `json:"published" validate:"required"`
	Enabled     bool      `json:"enabled"`
}

func (q *Queries) ListAllFeedChannel(ctx context.Context) ([]ListAllFeedChannelRow, error) {
	rows, err := q.db.QueryContext(ctx, listAllFeedChannel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllFeedChannelRow
	for rows.Next() {
		var i ListAllFeedChannelRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Link,
			&i.Host,
			&i.Published,
			&i.Enabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFeedChannel = `-- name: ListFeedChannel :many

SELECT id, link, host, last_update
FROM (
    SELECT
        fc.id,
        fc.link,
        fc.host,
        MAX(fl.last_update) AS last_update
    FROM feed_channel AS fc
    LEFT JOIN feed_channel_log fl ON fc.id = fl.channel_id
    WHERE fc.enabled = 1
    GROUP BY fc.id, fc.link, fc.host
) AS LatestUpdates
WHERE datetime('now', '-' || ?1 || ' minutes') > COALESCE(last_update, '1970-01-01')
ORDER BY host, last_update DESC
`

type ListFeedChannelRow struct {
	ID         int64       `json:"id"`
	Link       string      `json:"link" validate:"required,url"`
	Host       string      `json:"host"`
	LastUpdate interface{} `json:"last_update"`
}

// Feed Channel Queries
func (q *Queries) ListFeedChannel(ctx context.Context, minutes sql.NullString) ([]ListFeedChannelRow, error) {
	rows, err := q.db.QueryContext(ctx, listFeedChannel, minutes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFeedChannelRow
	for rows.Next() {
		var i ListFeedChannelRow
		if err := rows.Scan(
			&i.ID,
			&i.Link,
			&i.Host,
			&i.LastUpdate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFeedItem = `-- name: ListFeedItem :many

SELECT fi.id, fi.guid, fi.guid_is_permalink, fi.title, fi.description, fi.link, fi.author, fi.published
FROM feed_item AS fi
LEFT JOIN feed_channel_item AS fci ON fi.id = fci.item_id
WHERE fci.channel_id = ?1
ORDER BY published DESC
`

type ListFeedItemRow struct {
	ID              int64        `json:"id"`
	Guid            null.String  `json:"guid,omitempty" validate:"required"`
	GuidIsPermalink sql.NullBool `json:"guid_is_permalink"`
	Title           string       `json:"title"`
	Description     null.String  `json:"description,omitempty" validate:"required"`
	Link            string       `json:"link"`
	Author          *string      `json:"author,omitempty" validate:"required"`
	Published       null.Time    `json:"published" validate:"required"`
}

// Feed Data Queries
func (q *Queries) ListFeedItem(ctx context.Context, id int64) ([]ListFeedItemRow, error) {
	rows, err := q.db.QueryContext(ctx, listFeedItem, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFeedItemRow
	for rows.Next() {
		var i ListFeedItemRow
		if err := rows.Scan(
			&i.ID,
			&i.Guid,
			&i.GuidIsPermalink,
			&i.Title,
			&i.Description,
			&i.Link,
			&i.Author,
			&i.Published,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroup = `-- name: ListGroup :many

SELECT id, name
FROM feed_group
ORDER BY @order || ' ' || @direction
`

type ListGroupRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

// Feed Group Queries
func (q *Queries) ListGroup(ctx context.Context) ([]ListGroupRow, error) {
	rows, err := q.db.QueryContext(ctx, listGroup)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListGroupRow
	for rows.Next() {
		var i ListGroupRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeChannelFromGroup = `-- name: RemoveChannelFromGroup :exec
DELETE FROM feed_group_channel
WHERE group_id = ?1 AND channel_id = ?2
`

type RemoveChannelFromGroupParams struct {
	GroupID   int64 `json:"group_id"`
	ChannelID int64 `json:"channel_id"`
}

func (q *Queries) RemoveChannelFromGroup(ctx context.Context, arg RemoveChannelFromGroupParams) error {
	_, err := q.db.ExecContext(ctx, removeChannelFromGroup, arg.GroupID, arg.ChannelID)
	return err
}

const removeFeedItemFromChannel = `-- name: RemoveFeedItemFromChannel :exec
DELETE FROM feed_channel_item
WHERE channel_id = ?1 AND item_id = ?2
`

type RemoveFeedItemFromChannelParams struct {
	ChannelID int64 `json:"channel_id" validate:"required"`
	ItemID    int64 `json:"item_id" validate:"required"`
}

func (q *Queries) RemoveFeedItemFromChannel(ctx context.Context, arg RemoveFeedItemFromChannelParams) error {
	_, err := q.db.ExecContext(ctx, removeFeedItemFromChannel, arg.ChannelID, arg.ItemID)
	return err
}

const updateFeedChannel = `-- name: UpdateFeedChannel :exec
UPDATE feed_channel
SET title = ?1, description = ?2, link = ?3, host = ?4
WHERE id = ?5
`

type UpdateFeedChannelParams struct {
	Title       string `json:"title" validate:"required,min=5,max=20"`
	Description string `json:"description"`
	Link        string `json:"link" validate:"required,url"`
	Host        string `json:"host"`
	ID          int64  `json:"id"`
}

func (q *Queries) UpdateFeedChannel(ctx context.Context, arg UpdateFeedChannelParams) error {
	_, err := q.db.ExecContext(ctx, updateFeedChannel,
		arg.Title,
		arg.Description,
		arg.Link,
		arg.Host,
		arg.ID,
	)
	return err
}

const updateFeedChannelFDescription = `-- name: UpdateFeedChannelFDescription :exec
UPDATE feed_channel
SET description = ?1
WHERE id = ?2
`

type UpdateFeedChannelFDescriptionParams struct {
	Description string `json:"description"`
	ID          int64  `json:"id"`
}

func (q *Queries) UpdateFeedChannelFDescription(ctx context.Context, arg UpdateFeedChannelFDescriptionParams) error {
	_, err := q.db.ExecContext(ctx, updateFeedChannelFDescription, arg.Description, arg.ID)
	return err
}

const updateFeedChannelFLink = `-- name: UpdateFeedChannelFLink :exec
UPDATE feed_channel
SET link = ?1
WHERE id = ?2
`

type UpdateFeedChannelFLinkParams struct {
	Link string `json:"link" validate:"required,url"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateFeedChannelFLink(ctx context.Context, arg UpdateFeedChannelFLinkParams) error {
	_, err := q.db.ExecContext(ctx, updateFeedChannelFLink, arg.Link, arg.ID)
	return err
}

const updateFeedChannelFTitle = `-- name: UpdateFeedChannelFTitle :exec
UPDATE feed_channel
SET title = ?1
WHERE id = ?2
`

type UpdateFeedChannelFTitleParams struct {
	Title string `json:"title" validate:"required,min=5,max=20"`
	ID    int64  `json:"id"`
}

func (q *Queries) UpdateFeedChannelFTitle(ctx context.Context, arg UpdateFeedChannelFTitleParams) error {
	_, err := q.db.ExecContext(ctx, updateFeedChannelFTitle, arg.Title, arg.ID)
	return err
}

const updateFeedChannelFTitleAndDescription = `-- name: UpdateFeedChannelFTitleAndDescription :exec
UPDATE feed_channel
SET title = ?1, description = ?2
WHERE id = ?3
`

type UpdateFeedChannelFTitleAndDescriptionParams struct {
	Title       string `json:"title" validate:"required,min=5,max=20"`
	Description string `json:"description"`
	ID          int64  `json:"id"`
}

func (q *Queries) UpdateFeedChannelFTitleAndDescription(ctx context.Context, arg UpdateFeedChannelFTitleAndDescriptionParams) error {
	_, err := q.db.ExecContext(ctx, updateFeedChannelFTitleAndDescription, arg.Title, arg.Description, arg.ID)
	return err
}

const updateFeedItem = `-- name: UpdateFeedItem :exec
UPDATE feed_item
SET guid = ?, guid_is_permalink = ?, title = ?, description = ?, link = ?, author = ?, published = ?
WHERE id = ?
`

type UpdateFeedItemParams struct {
	Guid            null.String  `json:"guid,omitempty" validate:"required"`
	GuidIsPermalink sql.NullBool `json:"guid_is_permalink"`
	Title           string       `json:"title"`
	Description     null.String  `json:"description,omitempty" validate:"required"`
	Link            string       `json:"link"`
	Author          *string      `json:"author,omitempty" validate:"required"`
	Published       null.Time    `json:"published" validate:"required"`
	ID              int64        `json:"id"`
}

func (q *Queries) UpdateFeedItem(ctx context.Context, arg UpdateFeedItemParams) error {
	_, err := q.db.ExecContext(ctx, updateFeedItem,
		arg.Guid,
		arg.GuidIsPermalink,
		arg.Title,
		arg.Description,
		arg.Link,
		arg.Author,
		arg.Published,
		arg.ID,
	)
	return err
}

const updateFeedItemFDeleted = `-- name: UpdateFeedItemFDeleted :exec
UPDATE feed_item
SET deleted = 1
WHERE id = ?
`

func (q *Queries) UpdateFeedItemFDeleted(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateFeedItemFDeleted, id)
	return err
}

const updateFeedItemShort = `-- name: UpdateFeedItemShort :exec
UPDATE feed_item
SET title = ?, description = ?, link = ?
WHERE id = ?
`

type UpdateFeedItemShortParams struct {
	Title       string      `json:"title"`
	Description null.String `json:"description,omitempty" validate:"required"`
	Link        string      `json:"link"`
	ID          int64       `json:"id"`
}

func (q *Queries) UpdateFeedItemShort(ctx context.Context, arg UpdateFeedItemShortParams) error {
	_, err := q.db.ExecContext(ctx, updateFeedItemShort,
		arg.Title,
		arg.Description,
		arg.Link,
		arg.ID,
	)
	return err
}

const updateGroup = `-- name: UpdateGroup :exec
UPDATE feed_group
SET name = ?1
WHERE id = ?2
`

type UpdateGroupParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) error {
	_, err := q.db.ExecContext(ctx, updateGroup, arg.Name, arg.ID)
	return err
}
